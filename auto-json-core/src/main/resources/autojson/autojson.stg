main(model) ::= <<
<model.package:package()>
<!
    No imports so that extension code don't implicitly depend on those,
    which can cause breakage if we change the imports here later.
!>

@javax.annotation.Generated("<model.processor.class.canonicalName>")
public final class <model.generatedTypeName> extends autojson.bind.NullableMapper\<<model.targetTypeName>\> {

    <model.variables:declare_mapper(); separator="\n">

    <! Underscore our variable names to minimise conflict with model supplied variables. !>
    @Override
    protected <model.targetTypeName> readNotNull(autojson.stream.JsonParser _parser) throws java.io.IOException {
        if (_parser.getToken() != autojson.stream.JsonToken.BEGIN_OBJECT) {
            throw new IllegalStateException(
                    "expected " + autojson.stream.JsonToken.BEGIN_OBJECT +
                            " but was " + _parser.getToken() + " at " + _parser.getLocation());
        }
        <model.variables:declare(); separator="\n">
        while (_parser.next() && _parser.getToken() != autojson.stream.JsonToken.END_OBJECT) {
            switch (_parser.getName()) {
                <model.variables:case(); separator="\n">
                default:
                    _parser.skipValue();
                    break;
            }
        }
        <model.creationSource>
    }

    @Override
    protected void writeNotNull(autojson.stream.JsonGenerator generator, <model.targetTypeName> element) throws java.io.IOException {
        generator.writeBeginObject();
        <model.variables:write(); separator="\n">
        generator.writeEndObject();
    }

}

>>

package(package) ::= <<
<if(!package.unnamed)>package <package.qualifiedName>;<endif>
>>

declare_mapper(var) ::= <<
private static final <var.mapper.type> <var.mapper.name> = <var.mapper.creation>;
>>

declare(var) ::= <<
<var.type> <var.varName> = <var.defaultValueSource; null="null">;
>>

case(var) ::= <<
case "<var.jsonName>":
    <var.varName> = <var.mapper.name>.read(_parser);
    break;
>>

write(var) ::= <<
generator.writeName("<var.jsonName>");
<var.mapper.name>.write(generator, element<var.valueAccessorSource>);
>>
