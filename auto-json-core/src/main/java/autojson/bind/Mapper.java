package autojson.bind;

import autojson.stream.JsonGenerator;
import autojson.stream.JsonParser;

import java.io.IOException;

/**
 * Maps object from/to JSON. A mapper may be implemented to read an entire JSON
 * document, or just a segment of a JSON document.
 *
 * @param <T> the type of object that can be handled by this mapper
 */
public interface Mapper<T> {

    /**
     * Reads an object from the given parser, beginning with the
     * <strong>next</strong> token and only read enough tokens to map the
     * result. The parser will be left pointing at the end of the JSON value.
     * <p/>
     * Any exception from the parser will be directly passed through.
     *
     * @return the value read, may be null
     * @throws IllegalStateException if a value cannot be mapped from the next
     *                               token
     */
    T read(JsonParser parser) throws IOException;

    /**
     * Reads an object from the given parser, beginning with the
     * <strong>current</strong> token and only read enough tokens to map the
     * result. The parser will be left pointing at the end of the JSON value.
     * <p/>
     * Any exception from the parser will be directly passed through.
     *
     * @return the value read, may be null
     * @throws IllegalStateException if a value cannot be mapped from the
     *                               current token
     */
    T readCurrent(JsonParser parser) throws IOException;

    /**
     * Writes the given value to the generator. JSON generated by this method
     * will be valid standalone JSON.
     * <p/>
     * Any exception from the parser will be directly passed through.
     *
     * @param value the value to write, may be null
     */
    void write(JsonGenerator generator, T value) throws IOException;

}
