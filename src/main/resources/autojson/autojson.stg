main(model) ::= <<
<model.package:package()>
<!
    No imports so that extension code don't implicitly depend on those,
    which can cause breakage if we change the imports here later.
!>

@javax.annotation.Generated("<model.processor.class.canonicalName>")
public final class <model.generatedTypeName> implements autojson.bind.ValueReader\<<model.targetElementName>\> {

    @Override
    public <model.targetElementName> read(javax.json.stream.JsonParser _parser) {
        {
            javax.json.stream.JsonParser.Event _event = _parser.next();
            if (_event == javax.json.stream.JsonParser.Event.VALUE_NULL) {
                return null;
            }
            if (_event != javax.json.stream.JsonParser.Event.START_OBJECT) {
                throw new autojson.bind.JsonBindException(
                        "expected " + javax.json.stream.JsonParser.Event.START_OBJECT +
                                " but was " + _event + " preceding " + _parser.getLocation(),
                                 _parser.getLocation());
            }
        }
        <model.variables:declare(); separator="\n">
        while (_parser.next() != javax.json.stream.JsonParser.Event.END_OBJECT) {
            switch (_parser.getString()) {
                <model.variables:case(); separator="\n">
                default:
                    autojson.JsonParsers.skipTree(_parser);
                    break;
            }
        }
        <model.creationSource>
    }

}

>>

package(package) ::= <<
<if(!package.unnamed)>package <package.qualifiedName>;<endif>
>>

declare(var) ::= <<
<var.type> <var.name> = <var.defaultValueSource; null="null">;
>>

case(var) ::= <<
case "<var.name>": {
    <var.readerClassName> _reader = autojson.bind.ReaderCache.getCachedReader(<var.readerClassName>.class);
    if (_reader == null) {
        _reader = new <var.readerClassName>();
        autojson.bind.ReaderCache.putCachedReader(_reader);
    }
    <var.name> = _reader.read(_parser);
    break;
}
>>
